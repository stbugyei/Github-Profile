{"version":3,"sources":["components/Form.js","components/ShowUsers.js","components/Loader.js","components/GetgithubUsers.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","type","name","autoComplete","placeholder","ShowUsers","users","generateHexaColor","hexaColor","i","Math","floor","random","length","DisplayUsers","slice","map","usersrepo","style","color","key","href","homepage","target","rel","location","bio","loginName","login","fontSize","src","avatar_url","alt","borderRight","paddingRight","paddingLeft","followers","following","public_repos","Loader","URL","GetgithubUsers","useState","error","setError","setUsers","getUsers","e","a","preventDefault","query","value","Promise","all","fetch","usernameFeed","status","statusText","json","userResponds","repoResponds","userInformation","push","displayDefaultUser","sort","useEffect","Object","keys","onSubmit","errormsg","margin","textAlign","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7a12c0aa.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Form() {\r\n\r\n    return (\r\n        <div className='search__container'>\r\n            <form className=\"search\">\r\n                <>\r\n                    <input\r\n                        className='input-field'\r\n                        type=\"search\"\r\n                        name=\"name\"\r\n                        autoComplete='on'\r\n                        placeholder=\"Find Users\" />\r\n                    <button\r\n                        className=\"btn\">\r\n                        <i className=\"fa fa-search\"></i>\r\n                    </button>\r\n                </>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react'\r\n\r\nconst ShowUsers = (users) => {\r\n\r\n    //========= Making a random color generator ========= \r\n    const generateHexaColor = () => {\r\n        let string = '0123456789abcdef'\r\n        let hexaColor = '#'\r\n        for (let i = 0; i < 6; i++) {\r\n            let index = Math.floor(Math.random() * string.length)\r\n            hexaColor += string[index]\r\n        }\r\n        return hexaColor\r\n    }\r\n    \r\n\r\n    //========= limiting the number to 15 repos =========   \r\n    const limitedSearchResult = users[1].slice(0, 15)\r\n\r\n\r\n    //========= Displaying the reducedSearchResult =========  \r\n    const DisplayUsers = limitedSearchResult.map(usersrepo => (\r\n        <p className=\"section-repos__details animate\"  style={{color:generateHexaColor()}} key={usersrepo.name}>\r\n            <a href={usersrepo.homepage} target=\"_blank\" rel=\"noopener noreferrer\">{usersrepo.name}</a>\r\n        </p>\r\n    ))\r\n\r\n\r\n    const location = users[0].location\r\n    const bio = users[0].bio\r\n    const loginName = users[0].login\r\n\r\n    return (\r\n        <center>\r\n            <div className=\"main\">\r\n                <div className=\"section-info animate\">\r\n                    <div className=\"section-info__name\">\r\n                        <div className=\"section-name__details animate\">\r\n                            <h2 className=\"animate\">{users[0].name}</h2>\r\n                        </div>\r\n\r\n                        <div className=\"section-name__details loc-details\">\r\n\r\n                            <div className=\"section-name__sub\">\r\n                                <div>\r\n                                    <p style={{ fontSize: '13px' }}><i className=\"fas fa-sign-in-alt\"></i> Login Name</p>\r\n                                    {loginName === null ? <h6>Not available</h6> : <h4 className=\"animate\">{users[0].login}</h4>}\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <p style={{ fontSize: '13px' }}> <i className=\"fas fa-map-marker-alt\"></i> Location</p>\r\n                                    {location === null ? <h6>Not available</h6> : <h4 className=\"animate\">{location}</h4>}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"section-name__avatar\">\r\n                                <img className=\"name-avatar\" src={users[0].avatar_url} alt={users.name} />\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"section-name__details bio-details\">\r\n                            <div style={{ borderRight: '2px solid #bbb', paddingRight: '5px' }}>\r\n                                <h4 className=\"animate\">Bio</h4>\r\n                            </div>\r\n\r\n                            <div style={{ paddingLeft: '5px' }}>\r\n                                {bio === null ? <h6>No Bio information available</h6> : <p style={{ fontSize: '13px' }} className=\"animate\">{bio}</p>}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"section-info__stats\">\r\n\r\n                        <div className=\"section-stats__details\">\r\n                            <h3 className=\"animate\" style={{color:generateHexaColor()}}>{users[0].followers}</h3>\r\n                            <small>Followers</small>\r\n                        </div>\r\n\r\n                        <div className=\"section-stats__details\">\r\n                            <h3 className=\"animate\" style={{color:generateHexaColor()}}>{users[0].following}</h3>\r\n                            <small>Following</small>\r\n                        </div>\r\n\r\n                        <div className=\"section-stats__details\">\r\n                            <h3 className=\"animate\" style={{color:generateHexaColor()}}>{users[0].public_repos}</h3>\r\n                            <small>Public repos</small>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"section-info__repos\">\r\n                        {DisplayUsers === null ? <h6>No Repositories available</h6> : <>{DisplayUsers}</>}\r\n                    </div>\r\n                </div>\r\n                <div className=\"section-avatar animate\">\r\n                    <img className=\"avatar animate\" src={users[0].avatar_url} alt={users.name} />\r\n                </div>\r\n            </div>\r\n        </center>\r\n    )\r\n}\r\n\r\nexport default ShowUsers\r\n","import React from 'react'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <center>\r\n            <div className=\"loader-position\">\r\n                <div className=\"loading-sector-orange\">O</div>\r\n                <div className=\"loading-sector-lightblue\">O</div>\r\n                <div className=\"loading-sector-purble\">P</div>\r\n                <div className=\"loading-sector-blue\">S</div>\r\n            </div>\r\n        </center>\r\n\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Form from './Form';\r\nimport ShowUsers from './ShowUsers';\r\nimport Loader from './Loader';\r\n\r\n\r\nconst URL = \"https://api.github.com/users/\";\r\n\r\nconst GetgithubUsers = () => {\r\n\r\n    const [error, setError] = useState(false);\r\n    const [users, setUsers] = useState({});\r\n\r\n\r\n    //========= An async and await function to fetch users =========\r\n\r\n    const getUsers = async (e) => {\r\n        e.preventDefault();\r\n        const query = e.target.name.value;\r\n\r\n        const usernameFeed = await Promise.all([\r\n            fetch(URL + query),\r\n            fetch(URL + query + '/repos'),\r\n        ]);\r\n\r\n        if (((usernameFeed[0].status) || (usernameFeed[1].status)) !== 200) {\r\n\r\n            setError(<span>Username <h4 style={{ color: 'red' }}>{query}</h4>{(usernameFeed[0].statusText)}</span>);\r\n\r\n        } else {\r\n\r\n            const userResponds = await usernameFeed[0].json();\r\n            const repoResponds = await usernameFeed[1].json();\r\n            let userInformation = []\r\n            userInformation.push(userResponds, repoResponds);\r\n            setUsers(userInformation);\r\n            setError(null);\r\n        }\r\n    }\r\n\r\n\r\n    //======== An async and wait function to display default user =========\r\n\r\n    const displayDefaultUser = async () => {\r\n\r\n        const userName = ['littlesoldier2019', 'anyariazantceva']\r\n\r\n        //======== Making a random selection of user names =========\r\n\r\n        // const query = userName[Math.floor(Math.random() * userName.length)];\r\n\r\n        const query = userName.sort(() => Math.random() - 0.5)[0];\r\n\r\n        const usernameFeed = await Promise.all([\r\n            fetch(URL + query),\r\n            fetch(URL + query + '/repos'),\r\n        ]);\r\n\r\n        if (((usernameFeed[0].status) || (usernameFeed[1].status)) !== 200) {\r\n\r\n            setError(<span>Username <h4 style={{ color: 'red' }}>{query}</h4>{(usernameFeed[0].statusText)}</span>);\r\n\r\n        } else if (((usernameFeed[0].status) || (usernameFeed[1].status)) === 403) {\r\n\r\n            setError(<h4 style={{ color: 'red' }}> {(usernameFeed[0].statusText)}</h4>);\r\n\r\n        } else {\r\n\r\n            const userResponds = await usernameFeed[0].json();\r\n            const repoResponds = await usernameFeed[1].json();\r\n            let userInformation = []\r\n            userInformation.push(userResponds, repoResponds);\r\n            setUsers(userInformation);\r\n            setError(null);\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        displayDefaultUser();\r\n    }, [])\r\n\r\n\r\n    if (!(users && Object.keys(users).length)) {\r\n        return <> <Loader /> <div style={errormsg}>Cannot Fetch from <p style={{ color: 'red' }}>{URL}</p></div>\r\n        </>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className='form_wrapper' onSubmit={getUsers}><Form /></div>\r\n            { !error ? <ShowUsers {...users} /> : <><Loader /> <div style={errormsg}>{error}</div></>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GetgithubUsers\r\n\r\n\r\nconst errormsg = {\r\n    margin: '30px',\r\n    textAlign: 'center',\r\n};","import React from 'react';\nimport GetgithubUsers from './components/GetgithubUsers';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <>\n      <GetgithubUsers />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}